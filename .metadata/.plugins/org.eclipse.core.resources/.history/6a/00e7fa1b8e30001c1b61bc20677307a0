/*
 * Nexo.c
 *
 *  Created on: 13 oct. 2021
 *      Author: riky
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>
#include "Clientes.h"
#include "DateRelacion.h"
#include "Nexo.h"
#include "Pedidos.h"
int localidadEnClientes(eClientes* listaClientes, eLocalidad listaLocalidad, int tamLocalidad,
				int tamclientes)
{
	int retorno = -1;
	for (int i = 0; i < tamclientes; i++)
	{
		if (listaClientes[i].idLocalidad == listaLocalidad.idLocalidad)
		{
			retorno = i;
		}
	}
	return retorno;
}
int locadidadPedidosPendientes(eLocalidad* listaLocalidad, eClientes* listaClientes,
				ePedidos* listaPedidos, int tamLocalidad, int tamClientes, int tamPedidos)
{
	int retorno = -1;
	int idlocali;
	int espacioEnPedido;
	int espacioEnCliente;

	getNumero(&idlocali, "ingrese id localidad", "error", 1, LOCALIDADES, REINTENTOS);

	printf("                  LISTA DE LOCALIDADES\n"
					"----------------------------------------------------------\n"
					"ID    localidad   \n"
					"-----------------------------------------------------------\n");

	if (listaLocalidad != NULL && tamLocalidad > 0)
	{
		for (int i = 0; i < tamLocalidad; i++)
		{
			if ((listaLocalidad[i].isEmpty == CARGADO && listaLocalidad[i].idLocalidad == idlocali))
			{
				MostrarLocalidad(listaLocalidad[i]); //localidades
				printf("\n------------PEDIDOS PENDIENTES--------------\n");
				espacioEnCliente = localidadEnClientes(listaClientes, *listaLocalidad, tamLocalidad,
								tamClientes);

				if (listaLocalidad[i].idLocalidad == listaClientes[espacioEnCliente].idLocalidad)
				{
					espacioEnPedido = BuscarClienteEnPedido(listaPedidos, *listaClientes, tamPedidos,
									tamClientes);

					MostrarPedido(listaPedidos[espacioEnPedido], listaClientes[espacioEnCliente]);
					retorno = 0;
				}

			}
		}

	}

	return retorno;
}

int CargarCliente(eClientes lista[], eLocalidad listLocalidad[], int tamLocalidad, int tam,
				int* contadorId, int* contadorLocalidad, int limitCarac)
{
	int retorno =-1;
	int auxContador;
	char empresa[limitCarac];
	char direccion[limitCarac];
	int localidad;
	double cuit;
	int opcion;
	int auxLocalidad = *contadorLocalidad;
	auxContador = *contadorId;

	if (BuscarPrimerEspacioVacio(lista, tam) != -1)
	{
		if (getString(empresa, limitCarac, "empresa", "\n Error\n", REINTENTOS) == 0
						&& getString(direccion, limitCarac, "direccion", "\n Error\n", REINTENTOS) == 0
						&& (getNumeroCuit(&cuit, "ingrese cuit, 11 digitos de corrido", "\n Error\n", 0,
						LONG_MAX, REINTENTOS) == 0))
		{
			if (buscarlistaCargada(lista, CLIENTES) == 0
							|| (printLocalidades(listLocalidad, tamLocalidad) == 0
											&& getNumero(&opcion, "ingrese id localidad  o 0 para agregar", "ERROR", 0,
															auxLocalidad,
															REINTENTOS) == 0))
			{
				if (opcion == 0 || buscarlistaCargada(lista, CLIENTES) == 0)
				{
					if (CargarLocalidad(listLocalidad, tamLocalidad, &auxLocalidad) == 0)
					{

						*contadorLocalidad=auxLocalidad;
						printLocalidades(listLocalidad, tamLocalidad);

						if(!getNumero(&localidad, "ingrese id localidad", "\n Error\n", 1, auxLocalidad,
										REINTENTOS))
						{
							retorno=0;
						}


					}
					else
					{
						retorno =-1;
					}

				}
				else
				{

					localidad = opcion;
				}

			}
			if(retorno!=-1)
			{

			auxContador++;

			retorno = addEmployee(lista, tam, auxContador, empresa, direccion, localidad, cuit);
			}

		}
		else
		{
			printf("\n supero los intentos, No pudo cargar\n");
		}
	}
	else
	{
		printf("lista llena");
	}
	*contadorId = auxContador;
	return retorno;
}
int mostrarclientesConPedido(eClientes* listaClientes, eLocalidad* listaLocalidad,
				ePedidos* listaPedidos, int tamLocalidad, int tamClientes, int tamPedidos)
{
	int retorno = -1;
	int localidad;

	if (listaClientes != NULL && tamClientes > 0
					&& buscarListaPendientePedidos(listaPedidos, tamPedidos) == 1)
	{

		for (int i = 0; i < tamClientes; i++) //clientes

		{
			if ((listaClientes[i].isEmpty == CARGADO))
			{
				printf("                 CLIENTE\n"
								"----------------------------------------------------------\n"
								"ID   EMPRESA    DIRECCION   LOCALIDAD   CUIT\n"
								"-----------------------------------------------------------\n");

				localidad = buscarClientesEnLocalidad(listaClientes[i], listaLocalidad, tamLocalidad,
								tamClientes);

				if (localidad != -1)
				{

					MostrarEmpleado(listaClientes[i], listaLocalidad[localidad]); // listaclientes y localidad(lugar q coincide)
					{
						printf("PEDIDO PENDIENTES\n"
										"----------------------------------------------------------\n"
										"IDPEDIDO         CUIT          DIRECCION       KILOS                  \n"
										"-----------------------------------------------------------\n");
						for (int j = 0; j < tamPedidos; j++) //pedidos
						{
							if (listaClientes[i].id == listaPedidos[j].idClientes)
							{
								//mostrar
								MostrarPedido(listaPedidos[j], listaClientes[i]);
							}
						}

					}
					retorno = 0;
				}

			}
		}
	}
	return retorno;
}

int mostarclientes(eClientes* lista, eLocalidad* listaLocalidad, int tamLocalidad, int largo)
{
	int retorno = -1;
	int localidad;

	if (lista != NULL && largo > 0 && buscarlistaCargada(lista, largo) == 1)
	{
		printf("                  LISTA DE EMPLEADOS\n"
						"----------------------------------------------------------\n"
						"ID   EMPRESA   DIRECCION   localidad   cuit\n"
						"-----------------------------------------------------------\n");

		for (int i = 0; i < largo; i++)
		{
			//for (int j = 0; j < tamLocalidad; j++)

			if ((lista[i].isEmpty == CARGADO))
			{
				localidad = buscarClientesEnLocalidad(lista[i], listaLocalidad, tamLocalidad, largo);
				if (localidad != -1)
				{
					MostrarEmpleado(lista[i], listaLocalidad[localidad]);
				}
				retorno = 0;
			}

		}
	}
	return retorno;
}

int buscarClientesEnLocalidad(eClientes lista, eLocalidad* listaLocalidad, int tamLocalidad,
				int largo)
{
	int retorno = -1;
	for (int i = 0; i < tamLocalidad; i++)
	{
		if (listaLocalidad[i].idLocalidad == lista.idLocalidad)
		{
			retorno = i;
		}
	}
	return retorno;
}

void MostrarEmpleado(eClientes list, eLocalidad listaLocalidad)
{
	printf("%-5d %-10s %-10s %-10s %0.f \n", list.id, list.empresa, list.direccion,
					listaLocalidad.descripcion, list.cuit);

}
int removeCliente(eClientes* list, int tamClientes, int id)
{
	int retorno = -1;
	int remoIde;
	remoIde = buscarPorId(list, tamClientes, id);

	if (remoIde != -1 && list[remoIde].isEmpty == CARGADO)
	{
		list[remoIde].isEmpty = VACIO;
		//MostrarEmpleado(list[remoIde]);
		retorno = 0;
	}
	else
	{
		printf("Error no se encontro id");
	}

	return retorno;
}

int buscarPorId(eClientes* list, int len, int id)
{
	int retorno = -1;

	for (int i = 0; i < len; i++)
	{
		if (list[i].id == id && list[i].isEmpty == CARGADO)
		{
			retorno = i;
		}

	}

	return retorno;
}
int modificarCliente(eClientes* list, eLocalidad* listaLocalidad, int tamLocalidad, int tamClientes,
				int limitCarac, int* contadorLocalidad)
{
	int opcion;
	char empresa[50];
	char direccion[50];
	int localidad;
	double cuit;
	int retorno = -1;
	int modifIde;
	int idModificacion;
	if (buscarlistaCargada(list, tamClientes) == 1)
	{

		if (getNumero(&idModificacion, "\n ingrese id a modificar ", "no se puedo modifcar", 1,
		INT_MAX, 3) != 0)
		{
			printf("\n"
							"supero el maximo de intentos");
		}
		else
		{
			/*modificarCliente(list, listaLocalidad, LOCALIDADES, CLIENTES, idModificacion, TAMCARACTER,
			 &contadorLocalidad);*/
			modifIde = buscarPorId(list, tamClientes, idModificacion);
			if (modifIde != -1 && list[modifIde].isEmpty == CARGADO)
			{
				if (getString(empresa, limitCarac, "empresa", "\n Error\n", REINTENTOS) == 0
								&& getString(direccion, limitCarac, "direccion", "\n Error\n", REINTENTOS) == 0
								&& (getNumeroCuit(&cuit, "ingrese cuit, 11 digitos de corrido", "\n Error\n", 0,
								LONG_MAX, REINTENTOS) == 0))
				{
					printLocalidades(listaLocalidad, tamLocalidad);
					if (getNumero(&opcion, "ingrese id localidad  o 0 para agregar", "ERROR", 0, 1000,
					REINTENTOS) == 0)
					{
						if (opcion == 0)
						{
							CargarLocalidad(listaLocalidad, tamLocalidad, contadorLocalidad);
							printLocalidades(listaLocalidad, tamLocalidad);
							getNumero(&localidad, "ingrese id localidad", "\n Error\n", 1, 10000, REINTENTOS);

						}
						else
						{

							localidad = opcion;
						}

					}
					strcpy(list[modifIde].empresa, empresa);
					strcpy(list[modifIde].direccion, direccion);
					list[modifIde].idLocalidad = localidad;
					list[modifIde].cuit = cuit;
					retorno = 0;
				}
				else
				{
					printf("\n supero los intentos, No pudo cargar\n");

				}
			}

		}
///-----------------------------------------------
	}

	return retorno;
}
